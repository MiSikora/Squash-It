apply plugin: "com.github.ben-manes.versions"

buildscript {
  ext.buildConfig = [
      "compileSdk": 29,
      "minSdk": 21,
      "targetSdk": 29,
      "buildTools": "29.0.2",
  ]

  ext.versions = [
      "kotlin": "1.3.61",
      "coroutines": "1.3.3",
      "moshi": "1.9.2",
      "retrofit": "2.7.0",
      "detekt": "1.2.2",
  ]

  ext.deps = [
      "android": [
          "x": [
              "appCompat": "androidx.appcompat:appcompat:1.1.0",
              "constraintLayout": "androidx.constraintlayout:constraintlayout:2.0.0-beta3",
              "coreKtx": "androidx.core:core-ktx:1.2.0-rc01",
          ],
          "material": "com.google.android.material:material:1.2.0-alpha02",
          "gradlePlugin": "com.android.tools.build:gradle:3.6.0-rc01",
      ],
      "kotlin": [
          "stdLib": [
              "jdk7": "org.jetbrains.kotlin:kotlin-stdlib-jdk7:${versions.kotlin}",
          ],
          "coroutines": [
              "android": "org.jetbrains.kotlinx:kotlinx-coroutines-android:${versions.coroutines}",
              "test": "org.jetbrains.kotlinx:kotlinx-coroutines-test:${versions.coroutines}",
          ],
          "gradlePlugin": "org.jetbrains.kotlin:kotlin-gradle-plugin:${versions.kotlin}",
      ],
      "okio": "com.squareup.okio:okio:2.4.1",
      "okHttp": "com.squareup.okhttp3:okhttp:4.2.2",
      "moshi": [
          "runtime": "com.squareup.moshi:moshi-kotlin:${versions.moshi}",
          "compiler": "com.squareup.moshi:moshi-kotlin-codegen:${versions.moshi}",
      ],
      "retrofit": [
          "core": "com.squareup.retrofit2:retrofit:${versions.retrofit}",
          "moshiConverter": "com.squareup.retrofit2:converter-moshi:${versions.retrofit}",
      ],
      "telescope": "com.mattprecious.telescope:telescope:2.2.0",
      "timber": "com.jakewharton.timber:timber:4.7.1",
      "byteunits": "com.jakewharton.byteunits:byteunits:0.9.1",
      "junit": "junit:junit:4.13-rc-2",
      "kotlinTestAssertions": "io.kotlintest:kotlintest-assertions:3.4.2",
      "versionsGradlePlugin": "com.github.ben-manes:gradle-versions-plugin:0.27.0",
      "detekt": [
          "gradlePlugin": "io.gitlab.arturbosch.detekt:detekt-gradle-plugin:${versions.detekt}",
          "formattingPlugin": "io.gitlab.arturbosch.detekt:detekt-formatting:${versions.detekt}",
      ],
      "mavenPublishGradlePlugin": "com.vanniktech:gradle-maven-publish-plugin:0.8.0",
  ]

  repositories {
    google()
    gradlePluginPortal()
  }

  dependencies {
    classpath deps.android.gradlePlugin
    classpath deps.kotlin.gradlePlugin
    classpath deps.detekt.gradlePlugin
    classpath deps.versionsGradlePlugin
    classpath deps.mavenPublishGradlePlugin
  }
}

allprojects {
  repositories {
    mavenCentral()
    google()
    jcenter()
  }

  group = GROUP
  version = VERSION_NAME

  configurations.all {
    resolutionStrategy {
      eachDependency { details ->
        def requested = details.requested
        if (requested.name.startsWith("kotlin-stdlib")) {
          details.useTarget "" +
              "${requested.group}:" +
              "${requested.name.replace("jre", "jdk")}:" +
              "${requested.version}"
        } else if (requested.group == "org.jetbrains.kotlin") {
          details.useVersion versions.kotlin
        }
      }
    }
  }

  plugins.withType(com.android.build.gradle.BasePlugin).configureEach { plugin ->
    plugin.extension.compileOptions {
      sourceCompatibility = JavaVersion.VERSION_1_8
      targetCompatibility = JavaVersion.VERSION_1_8
    }

    android {
      compileSdkVersion buildConfig.compileSdk
      buildToolsVersion buildConfig.buildTools

      defaultConfig {
        minSdkVersion buildConfig.minSdk
        targetSdkVersion buildConfig.targetSdk

        resConfigs "en"
        vectorDrawables.useSupportLibrary = true
      }

      lintOptions {
        lintConfig rootProject.file("lint.xml")

        htmlReport !isCi()

        xmlReport isCi()
        xmlOutput file("build/reports/lint/lint-results.xml")

        textReport true
        textOutput "stdout"
        explainIssues false

        checkDependencies false
        checkTestSources false

        checkReleaseBuilds false
      }
    }
  }

  plugins.withType(com.android.build.gradle.LibraryPlugin).configureEach {
    android {
      variantFilter { variant ->
        if (variant.name != "release") setIgnore(true)
      }
    }
  }

  tasks.withType(JavaCompile).configureEach { task ->
    task.sourceCompatibility = JavaVersion.VERSION_1_8
    task.targetCompatibility = JavaVersion.VERSION_1_8
  }

  tasks.withType(org.jetbrains.kotlin.gradle.dsl.KotlinJvmCompile).configureEach { task ->
    task.kotlinOptions {
      jvmTarget = "1.8"
    }
  }

  tasks.withType(Test) {
    testLogging {
      events "skipped", "failed", "passed"
    }
  }

  tasks.withType(org.jetbrains.kotlin.gradle.dsl.KotlinCompile).configureEach { task ->
    task.kotlinOptions {
      freeCompilerArgs += [
          "-XXLanguage:+NewInference",
          "-Xuse-experimental=kotlinx.coroutines.ExperimentalCoroutinesApi",
          "-Xuse-experimental=kotlinx.coroutines.FlowPreview",
          "-progressive",
      ]
    }
  }
}

apply plugin: "io.gitlab.arturbosch.detekt"

dependencies {
  detektPlugins "io.gitlab.arturbosch.detekt:detekt-formatting:${versions.detekt}"
}

detekt {
  parallel = true
  config = files("detekt-config.yml")
  input = subProjectSources()
  reports {
    xml {
      enabled = isCi()
      destination = file("build/reports/detekt/detekt-results.xml")
    }
    html.enabled = !isCi()
    txt.enabled = false
  }
}

tasks.withType(io.gitlab.arturbosch.detekt.Detekt) {
  exclude "**/test/**"
}

tasks.register("check") {
  group = "Verification"
  description = "Allows to attach Detekt to the root project."
}

private def subProjectSources() {
  def paths = subprojects.collect { subProject ->
    "${subProject.projectDir}/src".replace("${rootProject.projectDir}/", "")
  }
  return files(*paths)
}

private static def isCi() {
  //noinspection GroovyPointlessBoolean
  return System.getenv("IS_CI")?.toBoolean() == true
}

dependencyUpdates {
  rejectVersionIf { isNotAtLeastAlpha(version) }
}

private static def isNotAtLeastAlpha(String version) {
  def stableKeyword = ["rc", "cr", "beta", "alpha"].any { version.toLowerCase().contains(it) }
  def regex = /^[0-9,.v-]+(-r)?$/
  return !stableKeyword && !(version ==~ regex)
}
