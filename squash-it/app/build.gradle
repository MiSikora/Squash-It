apply plugin: "com.android.application"
apply plugin: "kotlin-android"
apply plugin: "kotlin-kapt"
apply plugin: "com.squareup.sqldelight"

def gitSha = gitSha()
archivesBaseName = "squash-it-$gitSha"

android {
  defaultConfig {
    applicationId "io.mehow.squashit"

    versionCode headCommitCount()
    versionName "0.1.1"
    versionNameSuffix "-$gitSha"

    proguardFiles "shrink-rules.pro"
  }

  viewBinding {
    enabled = true
  }

  def uploadKeystore = file("upload.keystore")
  def keystoreProperties = file("upload-keystore.properties")
  def useUploadKeystore = uploadKeystore.exists() && keystoreProperties.exists()

  signingConfigs {
    debug {
      keyAlias "mehow-io"
      keyPassword "mehow-io"
      storeFile file("mehow-io.keystore")
      storePassword "mehow-io"
    }
    if (useUploadKeystore) {
      final signingProps = new Properties()
      keystoreProperties.withInputStream { signingProps.load(it) }
      upload {
        keyAlias "squash-it"
        keyPassword signingProps["keyPassword"]
        storeFile uploadKeystore
        storePassword signingProps["storePassword"]
      }
    }
  }

  buildTypes {
    debug {
      applicationIdSuffix ".debug"
      signingConfig signingConfigs.debug
    }

    release {
      if (useUploadKeystore) {
        signingConfig signingConfigs.upload
      } else {
        signingConfig signingConfigs.debug
      }

      minifyEnabled true
      shrinkResources true
    }
  }

  packagingOptions {
    exclude "**/*.kotlin_metadata"
    exclude "**/*.properties"
    exclude "*.properties"
    exclude "kotlin/**"
    exclude "META-INF/*.version"
    exclude "META-INF/proguard/*"
    exclude "META-INF/*.properties"
    exclude "META-INF/*.kotlin_module"
    exclude "META-INF/androidx.*"
    exclude "META-INF/CHANGES"
    exclude "META-INF/CHANGES.md"
    exclude "META-INF/CHANGES.txt"
    exclude "META-INF/README"
    exclude "META-INF/README.md"
    exclude "META-INF/README.txt"
  }
}

sqldelight {
  Database {
    packageName = "io.mehow.squashit"
  }
}

dependencies {
  implementation deps.kotlin.stdLib.jdk7
  implementation deps.android.x.appCompat
  implementation deps.android.x.coreKtx
  implementation deps.android.material
  implementation deps.dagger.runtime
  kapt deps.dagger.compiler
  implementation deps.dagger.androidRuntime
  kapt deps.dagger.androidCompiler
  implementation deps.kotlin.coroutines.android
  implementation deps.sqlDelight.driver.android
  implementation deps.sqlDelight.coroutinesExtensions

  testImplementation deps.junit
  testImplementation deps.kotlinTestAssertions
  testImplementation deps.kotlin.coroutines.test
  testImplementation deps.sqlDelight.driver.jvm
}

private def gitSha() {
  def stdOut = new ByteArrayOutputStream()
  exec {
    commandLine "git", "rev-parse", "HEAD"
    standardOutput = stdOut
  }
  return "$stdOut".trim()
}

private def headCommitCount() {
  def stdOut = new ByteArrayOutputStream()
  exec {
    commandLine "git", "rev-list", "--count", "HEAD"
    standardOutput = stdOut
  }
  return "$stdOut".trim().toInteger()
}
